name: Create a branch
on:
  workflow_dispatch:
    inputs:
      branch_type:
        description: 'Branch Type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - hotfix
      version:
        description: 'Version'
        required: true
        type: string

jobs:
  create_release_branch_job:
    name: Create release branch and tag
    if: ${{ inputs.branch_type }} == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Create the new branch
        env:
          BRANCH_NAME: "${{ inputs.branch_type }}/${{ inputs.version }}"
          BRANCH_BASE: "origin/main"
        shell: bash
        run: |
          echo "Create the new branch '${BRANCH_NAME}' from '${BRANCH_BASE}'"

          EXISTS_BRANCH=$(git branch -r --list "origin/${BRANCH_NAME}")
          if [ -n "$EXISTS_BRANCH" ]; then
            echo "$BRANCH_NAME branch already exists"
            exit 1
          fi

          git switch -C $BRANCH_NAME $BRANCH_BASE
          git push origin $BRANCH_NAME
          echo "$BRANCH_NAME branch has been created."

      - name: Create the new tag
        env:
          BRANCH_TYPE: ${{ inputs.branch_type }}
          VERSION_BASE: "${{ inputs.version }}-rc"
        shell: bash
        run: |
          echo "VERSION_BASE: ${VERSION_BASE}"
          tag_pattern="${VERSION_BASE}.*"
          echo "tag_pattern: ${tag_pattern}"
          existing_tags=$(git tag --list "$tag_pattern")
          echo "existing_tags: ${existing_tags}"

          echo "find Max RC number..."
          max_rc_number=0
          for tag in $existing_tags; do
            rc_number=$(echo $tag | sed -E "s/${VERSION_BASE}\.([0-9]+)/\1/")
            if [[ $rc_number -gt $max_rc_number ]]; then
              max_rc_number=$rc_number
            fi
          done
          echo "Max RC version: ${VERSION_BASE}.${max_rc_number}"

          next_rc_number=$((max_rc_number + 1))
          next_tag="${VERSION_BASE}.${next_rc_number}"
          echo "Next RC version: ${next_tag}"

          git tag $next_tag
          git push origin $next_tag

      # - name: Create release branch and tag
      #   env:
      #     BRANCH_TYPE: ${{ inputs.branch_type }}
      #     VERSION: ${{ inputs.version }}
      #     NEW_BRANCH: "${{ inputs.branch_type }}/${{ inputs.version }}"
      #     VERSION_TAG: "${{ inputs.version }}-rc.1"
      #   shell: bash
      #   run: |
      #     echo "New Branch: ${NEW_BRANCH}"
      #     git fetch -a
      #     EXIST_BRANCH=$(git branch -r --list "origin/${NEW_BRANCH}")
      #     echo "EXIST_BRANCH: ${EXIST_BRANCH}"
      #     if [ -n "$EXIST_BRANCH" ]; then
      #       echo "$NEW_BRANCH branch already exists"
      #       exit 0
      #     fi
      #     git switch -C $NEW_BRANCH origin/main
      #     git push origin $NEW_BRANCH

      #     git branch -r | while read -r branch; do
      #       echo "Branch: ${branch}"
      #     done
